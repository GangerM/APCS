public void edgeDetection(int edgeDist)
  {
	Pixel leftPixel = null;
	Pixel rightPixel = null;
	Pixel topPixel = null;
	Pixel bottomPixel = null;
	
	Pixel[][] pixels = this.getPixels2D();
	for (int row = 0; row < pixels.length - 1; row++)
	{
  	for (int col = 0;
       	col < pixels[0].length-1; col++)
  	{
    	leftPixel = pixels[row][col];
    	rightPixel = pixels[row][col+1];
    	topPixel = pixels[row][col];
    	bottomPixel = pixels[row + 1][col];
    	if (leftPixel.colorDistance(rightPixel.getColor()) > edgeDist ||
            topPixel.colorDistance(bottomPixel.getColor()) > edgeDist)
          leftPixel.setColor(Color.BLACK);
    	else
          leftPixel.setColor(Color.WHITE);
  	}
	}
  }











public void edgeDetection2(int edgeDist)
  {
  	Pixel currentPixel = null
    Pixel testPixel = null;
  	int testWidth = 3;
  	int testHeight = 3;
  	Pixel[][] pixels = this.getPixels2D();
  	double[][] edgeAngle = new double[Math.round(pixels.length / testHeight)][Math.round(pixels[0].length / testWidth)];
  	for (int row = 0; row < pixels.length - testHeight; row += testHeight)
  	{
      	for (int col = 0; col < pixels[0].length - testWidth; col += testWidth)
      	{
              Pixel[][] currentPixels = this.getPixelCluster(pixels, row, col, testWidth, testHeight);
          	
          	double greatestDistance = -10;
          	double greatestAngle = -1; 
          	for (double angle = 0; angle < Math.PI + 0.1; angle += Math.PI )
          	{
	              ArrayList<Pixel> group1 = this.getPartialArray(currentPixels, angle, 0);
                  Color group1Color = this.getAverageColor(this.getPixelColors(group1));
                  ArrayList<Pixel> group2 = this.getPartialArray(currentPixels, angle, 1);
                  Color group2Color = this.getAverageColor(this.getPixelColors(group2));
              	
                  double currentColorDistance = this.colorDistance(group1Color, group2Color);
              	
              	if (currentColorDistance > greatestDistance)
              	{
                      greatestDistance = currentColorDistance;
                      greatestAngle = angle;
              	}
              	
          	}
          	
              greatestAngle = Math.round(greatestAngle * 100.0) / 100.0;
              edgeAngle[row / testHeight][col / testWidth] = greatestAngle;
          	
          	
          	if (greatestDistance > edgeDist)
          	{
          	    ArrayList<Pixel> group1 = this.getPartialArray(currentPixels, greatestAngle, 0);
                  ArrayList<Pixel> group2 = this.getPartialArray(currentPixels, greatestAngle, 1);
              	
              	for (Pixel pixel : group1)
    	          {
                      pixel.setColor(Color.BLACK);
              	}
              	
              	for (Pixel pixel : group2)
              	{
                      pixel.setColor(Color.WHITE);
              	}
          	}
              else
          	{
              	for (Pixel[] pixelArray : currentPixels)
              	{
                      for (Pixel pixel : pixelArray)
                      {
                          pixel.setColor(Color.WHITE);
        	          }
              	}
          	}
      	}
  	}
  

